EXCEÇÃO
é um evento que interrompe o fluxo normal do processamento de uma classe
o uso correto de exceções torna o programa mais robusto e confiável
com o tratamento de exceções, um programa pode continuar executando depois de lidar com um problema
Dica: 
incorpore sua estratégia de tratamento de exceções no sistema desde o princípio do processo do projeto
pode ser difícil incluir um tratamento de exceções eficiente depois que um sistema foi implementado

Tipos de Exceções 
A) Error: 
usado pela JVM que serve para indicar se existe algum problema de recurso do programa, tornando a execução impossível de continuar
o programa para abruptamente e não tem como o programador tratar
não há como fazer try catch, é um erro anormal
não checados pelo compilador(eventos irrecuperáveis)
também estende de throwable

B)Unchecked(Runtime):
exceptions que podem ser evitados se forem tratados e analisados pelo desenvolvedor
geralmente são erros de lógica
seu tratamento é facultativo, porém recomendado
exceções não checadas pelo compilador 
ex: dividir por zero, acessar posição inexistente de array

C)Checked Exception:
exceptions que devem ser evitados e tratados pelo desenvolvedor para o programa funcionar
seu tratamento é obrigatório
não herdam de runtime exception 
precisam ser declaradas
ex: tentar acessar um arquivo inexistente, fechar um arquivo que não foi aberto 


EXCEPTIONS 
suas classes e subclasses estendem de throwable (que é filha de object)
eventos recuperáveis
condições excepcionais checadas pelo compilador 
leem-se de baixo pra cima 


TRY, CATCH, FINALLY
cada uma dessas palavras, juntas, definem blocos para o tratamento de exceções 
THROWS
declara que um método pode lançar uma ou várias exceções 
THROW 
lança explicitamente uma exception (talvez personalizada)

UNCHECKED EXCEPTION 
Herdam da classe RuntimeException ou da classe Error.
O compilador não verifica o código para ver se a exceção foi capturada ou declarada.
Se uma exceção não-verificada ocorrer e não tiver sido capturada, o programa terminará ou executará com resultados inesperados.
Em geral, podem ser evitadas com uma codificação adequada.
TRY 
é o bloco onde ocorre a lógica onde pode ocorrer a exceção
CATCH 
captura a exceção 
é possível encadear catches para pegar exceções diferentes
FINALLY 
é opcional

NumberFormatException
erro no formato do numero 
ArithmeticException
exemplo: dividir por zero

CHECKED EXCEPTION
As exceções que são herdadas da classe Exception, mas não de RuntimeException.
O compilador impõe um requisito do tipo "capturar ou declarar".
O compilador verifica cada chamada de método e declaração de método para determinar se o método lança (throws) exceções verificadas.
Se lançar, o compilador assegura que a exceção verificada é capturada ou declarada em uma cláusula throws.
Caso não capturada nem declarada, ocorre um erro de compilação.
IOException é classe mãe de FileNotFoundException
add exception to method signature é um comando bem útil

EXCEPTION PERSONALIZADA
É boa prática colocar "Exception" quando a gente cria a nossa própria exceção
a exceção criada deve estender de Exception
é criada como uma classe, tendo atributos e métodos
Programadores podem achar útil declarar suas próprias classes de exceção.
Essas Exceptions são específicas aos problemas que podem ocorrer quando outro programador empregar suas classes reutilizáveis.
Uma nova classe de exceção deve estender uma classe de exceção existente que assegura que a classe pode ser utilizada com o mecanismo de tratamento de exceções, logo essas Exceções customizadas são derivadas da classe Exception.
Importante: Antes de criar a nossa própria exceção, é recomendado verificar se já existe alguma exceção na biblioteca Java que já nos forneça o que precisamos. Afinal, não queremos reinventar a roda!


BLOCO TRY
Região onde se encontra o código que queremos verificar se irá ou não lançar uma exceção.
Caso ocorra uma exceção em algum ponto, o restante do código contido no bloco try não será executado.
O bloco try não pode ser declarado sozinho, por tanto, precisa estar seguido de um ou vários blocos catch e/ou de um bloco finally.
BLOCO CATCH
Região onde se encontra o possível tratamento da exceção. Isso significa que só será executado caso o bloco try apresentar alguma exceção.
Recebe como argumento a classe ou subclasse da possível exceção.
No seu escopo ficam as instruções de como tratar essa exceção.
Pode haver mais de um bloco catch, porém, será executado apenas o primeiro bloco que identificar a exceção.
Importante: Caso você utilize mais de um catch e houver exceções de uma mesma hierarquia de classes, certifique-se que a classe mais genérica esteja como argumento do último catch. Caso contrário, qualquer exceção sempre cairá neste primeiro catch, assim fazendo com que a exception mais específica não seja verificada.
BLOCO FINALLY
Este bloco é opcional, mas caso seja construído, quase sempre será executado. (A menos que seja forçada sua parada, por exemplo, com um System.exit(0), no catch)
Dentro do bloco finally, poderá conter outros blocos try, catch, bem como outro finally.
Geralmente utilizado quando precisamos executar algum código independente se ocorrer exception ou não.


CLÁUSULA THROWS
Usada na assinatura do método.
Necessária apenas para exceções checked.
Informa ao chamador que este método pode lançar uma das exceções listadas no escopo do método. Isso obriga a fazer a captura dessa exception (try-catch) ou relançar o throws.
CLÁUSULA THROW
É usada para lançar explicitamente uma exceção de um método ou de qualquer bloco de código.
Usada principalmente para lançar exceções personalizadas
Importante:
O fluxo de execução "normal" do programa para imeditamente apos a execução da cláusula throw. O bloco try envolvente mais próximo é verificado para encontrar um bloco catch que corresponda ao tipo de exceção.
Caso encontre essa correspondência, o controlado é transferido para esse bloco. Caso contrário, o próximo bloco try envolvente é verificado e assim por diante.
Outro caso, e se nenhuma captura for encontrada, o manipulador da exceção padrão interromperá o programa.

OFF
JOptionPane é da classe javax.swing
printStrackTrace imprime a exceção, não só a mensagem de erro, mas toda a pilha
BufferedReader imprime um documento no console(como?)

GERAL 
UE- o compilador não verifica o código para ver se a exceção foi tratada ou propagada
CE- se lançada, o compilador assegura que a exceção verificada será tratada(try/catch) ou propagada(throws)
ERROR - usado pela JVM, serve para indicar quando existe algum problema em um recurso do programa, tornando a execução impossível de continuar
Exception - é um evento que interrompe o fluxo normal de processamento de uma classe
throws - I, II e IV 
uma nova classe de exceção não precisa necessariamente estender de uma classe de exceção existe(INCORRETA)
NumberFormatException
FileReader -> FileNotFoundException
catch, try, finally
IOException estende de RuntimeException(INCORRETA)
