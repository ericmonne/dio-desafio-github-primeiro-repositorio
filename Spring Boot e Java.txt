PLATAFORMA SPRING
SPRING
uma plataforma com diversos recursos para construção de aplicativos Java,
facilitando o desenvolvimento em Java EE 
com módulos que facilitam a construção de softwares,
reduzindo o tempo de desenvolvimento
com ele, p desenvolvedor não precisa se preocupar com configurações manuais de baixo nível para subir uma aplicação web e colcoar no ar
SPRING FRAMEWORK
dividido em 8 grupos:
-Data Access/Integration
provê funcionalidades para transações com banco de dados
JDBC, ORM, OXM, JMS, Transactions
-Web
provê implementações para aplicações web 
WebSocket
Servlet
Web
Portlet
-AOP 
programação orientada a aspectos 
-Aspects
-Instrumentation
instrumentação
-Messaging
implementações baseada em mensagens
-Core Container
parte fundamental, base do framework 
Beans, Core, Context e SpEL
-Test
testes unitários, utilizando jUnit 
testes de integração

BEANS 
objeto instanciado, montado e gerenciado por um container do Spring 
através de Inversão de Controle (IoC) e Injeção de Dependências(DI)

Ciclo de vida de um Bean
-> Container é iniciado -> 
-> Bean é instanciado -> 
-> Dependências são injetadas -> 
-> Chamada de Método de inicialização ->
-> Bean é utilizado ->
-> Bean é descartado -> (volta ao começo)
gerenciado pelo proprio spring framework 

Configuração de Bin
pode ser feita de duas formas:
1)arquivos XML
em XML seria preciso definir a tag <bean> dentro de uma tag principal <beans>
passando o path da classe
assim o Spring saberá quais classes gerenciar a criação de instâncias e a injeção de dependências
2)anotações 

BeanFactory
fornece um mecanismo de configuração avançada capaz de gerenciar objetos de qualquer natureza
ApplicationContext
se baseia na BeanFactory
é uma subinterface
é mais utilizado que o BeanFactory
adiciona outras funcionalidades:
integração masi fácil com os recursos AOP do Spring 
manipulação de recursos de mensagem (para uso na internacionalização)
propagação de eventos e contextos específicos da camada de aplicativo, como WebApplicationContext para uso em aplicativos web 
ApplicationContext nome = new AnnotationConfigApplicationContext();

INVERSÃO DE CONTROLE(IoC)
é um processo onde se inverte o fluxo de comando de um programa 
é uma ideia desacoplar ou remover dependências do objeto e fornecer controle para outra camada 
este objeto delega a tarefa de construir dependências para um container IoC

Injeção de Depedência(DI)
define quais classes serão instanciadas e onde serão injetadas quando for necessário 
há 3 formas de aplicar DI:
1)injeção de construtor
passar onde está o objeto dependente como argumento do construtor 
2)setter
3)interface
Spring Framework pode aplicar a IoC utilizando o DI quando necessário 

SPRING BOOT
extensão do Spring 
utiliza Spring Framework para iniciar uma aplicação de forma simples e rápida
sem se preocupar com configurações complexas, como o Tomcat
é como um template pré-configurado para desenvolvimento e execução de aplicações baseadas no Spring 
arquitetura baseada no Spring Core, que traz os componentes-base do Spring, como o mecanismo de DI/IoC, a Spring Expression Language(SpEL) e alguns módulos-base do Spring AOP(módulos para implementação de programação orientada a aspectos no Spring)
permite adicionar À estrutura-base um módulo
módulo: biblioteca ou ferramenta do ecossistema Spring que pode ser adicionada a uma aplicação Spring convencional
facilitar a vida do desenvolvedor java 
melhora a produtividade do desenvolvimento de softwares 
habilita o desenvolvedor a se concentrar nas regras de negócio e no código

Componentes Base: 
1)Spring Boot Starter
é o coração de uma aplicação Spring
combina as dependências de um projeto em uma única dependência
retira a necessidade de configuração de múltiplas dependências
2)Spring Boot Auto-Configuration
gerenciador de processos de configuração de aplicações Spring Boot 
3)Spring Boot Actuator
provisiona endpoints e obtenção de métricas da aplicação 

Spring Boot = 
Spring Framework +
+ Servidor Embutido(Tomcat ou Jetty) -
- XML<bean> Configuration || @Configuration

Dependências base do Spring Boot:
1)spring framework +spring boot starter  
2)spring framework test 

SPRING INITIALIZR 
fornece uma API extensível para gerar projetos baseados em JVM
é onde podemos criar um projeto Spring Boot de forma rápida e fácil 

AUTO-CONFIGURATION 
configuração automática do Spring Boot 
configura automaticamente a aplicação Spring 
com base nas dependências jar que adicionamos ao projeto 
para habilitar o recurso: 
-anotação @EnableAutoConfiguration, que não é usada pq está contida no @SpringBootApplication 
-anotação @SpringBootApplication combina 2 anotações: @ComponentScan + @EnableAutoConfiguration @Configuration 

SWAGGER
projeto open source com ferramentas para desenvolver APIs com a especificação OpenAPI Specification(OAS)
facilita criação, testes, consumo e documentação de APIs REST
OAS
especificação para descrever, produzir, consumir e visualizar serviços de uma API REST
permite descrever recursos, URIs, modelo de dados, métodos HTTP aceitos e códigos de resposta
@EnableSwagger2

FEIGN 
cliente de serviço web declarativo(cliente HTTP)
desenvolvido pela Netflix 
um dos mais populares do Spring Cloud Component 
possibilita criar clientes API HTTP no java de forma mais simples 
para chamar/consumir os serviços REST, utilizando anotações 
é uma biblioteca utilizada através de anotações no Spring 
é uma biblioteca muito utiizada para itnegrações e consumo de APIs
para usar o Feign, é preciso adicionar a dependência spring-cloud-starter-openfeign no pom.xml 
@EnableFeignProject
@FeignCliente


SPRING BOOT TEST 
Spring Boot facilita o desenvolvimento de testes de unidade e integração com o Spring Boot Test 
recurso bastante utilizado no desenvolvimento de aplicações java para testar comportamentos do código e regras do negócio 
para utilizar, é preciso usar spring-boot-starter-test 
spring-boot-starter-test importa:
-módulos de teste Spring Boot 
-JUnit Jupiter
-AssertJ 
-Hamcrest
-outras bibliotecas úteis 

Importância do Teste
em desenvolvimento de software, os erros podem aparecer em qualquer etapa do ciclo de vida do projeto 
é essencial
não é uma atividade opcional
oferece métodos e ferramentas necessárias para garantir a qualidade do desenvolvimento

TESTES UNITÁRIOS 
são a base da pirâmide de testes, em que são realizados o maior número de testes para garantir a fidelidade do código e regras do negócio

Pirâmide de testes: 
pra cima: maior custo, tempo de execução e fidelidade 
pra baixo: maior número de testes 
1-testes Manuais 
2-testes de UI 
3-Testes de Integração
4-Testes Unitários 

@SpringBootTest
anotação utilizada em uma classe de teste
diz ao Spring Boot para procurar uma classe de configuração principal (ex: @SpringBootApplication) e usá-la para inciiar um contexto de aplicativo Spring 

GERAL 
aplicar injeção de dependências em Spring: construtor, interface e setter 
bean: objeto instanciado, montado e gerenciado por um container do Spring 
DOCKET: usado em Swagger, para definir as apis e caminhos disponíveis para documentar uma API
Spring Boot: soma do Spring Framework + Servidor  Embutido(Tomcat ou Jetty) - XML <bean> Configuration ou @Configuration
Auto-Configuration é responsável por: configurar automaticamente a aplicação Spring com base nas dependências jar adicionadas ao projeto 
testes de unidade requerem um número maior de testes e têm baixo custo 
anotação @SpringBootTest diz ao Spring Boot para procurar uma classe de configuração principal e usá-la para inciiar um contexto de aplicativo Spring 
Feign: não é uma anotação do Spring Cloud que torna possível realizar o consumo e integrações de APIs 
Spring Core: módulo do Spring Framework responsável pela IoC/DI
SPRING INITIALIZR: fornece uma API extensível para gerar projetos baseados em JVM e é onde podemos criar um projeto Spring Boot



